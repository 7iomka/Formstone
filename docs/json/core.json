{"options":[],"events":[],"methods":[{"name":"Plugin","description":"Builds a plugin and registers it with jQuery.","params":[{"name":"namespace","type":"string","description":"Plugin namespace"},{"name":"settings","type":"object","description":"Plugin settings"}],"return":{"type":"object","description":"Plugin properties. Includes `defaults`, `classes`, `events`, `functions` and `methods` keys"},"example":"Formstone.Plugin(\"namespace\", { ... });"}],"name":"Formstone","description":"Library core.","use":"### Formstone Object\r\n\r\nThe Formstone core is a dependency of all javascript based components and will contain a few global values, as well as a simple plugin factory. The global Formstone object has access to the following keys:\r\n\r\n```\r\n$window\t\t\t\t\t// object, Reference to jQuery wrapped window\r\n$document\t\t\t\t// object, Reference to jQuery wrapped document\r\n$body\t\t\t\t\t// object, Reference to jQuery wrapped body tag\r\n\r\nPlugins\t\t\t\t\t// object, Contains all registered plugins\r\n\r\nhistorySupport\t\t\t// boolean, History api support, including push and pop state\r\nmatchMediaSupport\t\t// boolean, Match Media API support\r\nrafSupport\t\t\t\t// boolean, Request Animation Frame API support\r\ntransitionSupport\t\t// boolean, CSS3 Transition support\r\n\r\nuserAgent\t\t\t\t// string, Raw user string\r\nisChrome\t\t\t\t// boolean, Browser is Chrome\r\nisFirefox\t\t\t\t// boolean, Browser is FireFox\r\nisSafari\t\t\t\t// boolean, Browser is Safari\r\nisMobile\t\t\t\t// boolean, Browser is Mobile\r\nisFirefoxMobile\t\t\t// boolean, Browser is FireFox Mobile\r\n```\r\n\r\nUser agent sniffing isn't always reliable or considered a best practice - it should be used sparingly, if at all.\r\n\r\n### Plugin Factory\r\n\r\nThe `Formstone.Plugin` factory function is used to define a plugin. The factory will use the provided namespace to register the plugin with jQuery. The plugin is then available like any other:\r\n\r\n```\r\n$(“.target).plugin({\r\n\toption: value\r\n});\r\n```\r\n\r\n### Plugin Types\r\n\r\nThere are two types of plugins that can be defined: Widget or Utility.\r\n\r\n#### Widget\r\n\r\nWidget plugins are implicitly tied to an element to enhance or change the interface. Examples of Widgets include input enhancements like Picker or Selecter. A simple Widget might look like:\r\n\r\n```\r\n;(function ($, Formstone, undefined) {\r\n\r\n\tfunction setUp() {\r\n\t\t// this = document\r\n\t}\r\n\r\n\tfunction construct(data) {\r\n\t\t// this = jQuery wrapped target element\r\n\t\t// data = instance data\r\n\t}\r\n\r\n\tfunction destruct(data) {\r\n\t\t// this = jQuery wrapped target element\r\n\t\t// data = instance data\r\n\t}\r\n\r\n\tfunction reset(data) {\r\n\t\t// this = jQuery wrapped target element\r\n\t\t// data = instance data\r\n\t}\r\n\r\n\t// Register Plugin\r\n\r\n\tvar Plugin = Formstone.Plugin(\"namespace\", {\r\n\t\t\twidget: true,\r\n\t\t\tdefaults: {\r\n\t\t\t\toption:    value\r\n\t\t\t},\r\n\t\t\tclasses: [\r\n\t\t\t\t\"visible\"\r\n\t\t\t],\r\n\t\t\tmethods: {\r\n\t\t\t\t_setup         setup,\r\n\t\t\t\t_construct:    construct,\r\n\t\t\t\t_destruct:     destruct,\r\n\t\t\t\treset:         reset\r\n\t\t\t}\r\n\t\t}),\r\n\r\n\t\t// Localize References\r\n\r\n\t\tClasses      = Plugin.classes,\r\n\t\tEvents       = Plugin.events,\r\n\t\tFunctions    = Plugin.functions;\r\n\r\n})(jQuery, Formstone);\r\n```\r\n\r\nAs in the example above, Widgets can override three internal methods by pointing a key to the corresponding local function:\r\n\r\n```\r\n_setup\t\t\t\t\t// Run once when document is ready, scoped to document\r\n_construct\t\t\t\t// Run at initialization of each instance, scoped to specific instance\r\n_destruct\t\t\t\t// Run at destruction of each instance, scoped to specific instance\r\n```\r\n\r\nWhen an instance is created or destroyed, the factory will automatically add or remove the instance's localized plugin data. This data is available as the first argument in any public method call, or by using the namespace to query for the data:\r\n\r\n```\r\nthis.data(\"namespace\");\r\n```\r\n\r\nCustom public methods can also be defined, provided their keys are not prefixed with an underscore (`_`). The underscore signifies a core method and should be avoided when defining public methods. The factory will scope any public method call to the target instance, as well as provide it's plugin data as the first argument followed by any addition arguments:\r\n\r\n```\r\n$(\".target\").namespace(\"reset\", 500);\r\n```\r\n\r\nA Widget can also operate as a singleton, like Boxer or Tipper. In this case, events are bound to the instance's target element, while DOM manipulations are tied to a single internal instance. This helps prevent unwanted duplication when the interface pattern calls for a single instance.\r\n\r\n#### Utility\r\n\r\nUtility plugins may interact with DOM nodes but are not necessarily tied to any specific elements. An example of a Utility is the media query event abstraction provided by Rubberband. A simple Utility plugin might look like:\r\n\r\n```\r\n;(function ($, Formstone, undefined) {\r\n\r\n\tfunction delegate() {\r\n\t\t// Manually handle public methods\r\n\t}\r\n\r\n\t// Register Plugin\r\n\r\n\tvar Plugin = Formstone.Plugin(\"namespace\", {\r\n\t\t\tmethods: {\r\n\t\t\t\t_delegate:     delegate\r\n\t\t\t}\r\n\t\t}),\r\n\r\n\t\t// Internal Defaults\r\n\r\n\t\tDefaults = {\r\n\t\t\toption:    value\r\n\t\t},\r\n\r\n\t\t// Localize References\r\n\r\n\t\tDocument = Formstone.$document[0];\r\n\r\n})(jQuery, Formstone);\r\n```\r\n\r\nA utility can override the default method delegation by pointing the `_delegate` key to a custom function. The delegate function will need to manually handle any arguments passed. Otherwise, Utilities will use the same public method delegation system as Widgets.\r\n\r\n```\r\n$.namespace(\"reset\", 500);\r\n```\r\n\r\n#### Plugin Object\r\n\r\nDefining a plugin using the factory will return an object containing the follow keys:\r\n\r\n```\r\nnamespace\t\t\t\t// String, plugin namespace\r\ninitialized\t\t\t\t// Boolean, initialized state\r\ndefaults\t\t\t\t// Object, default options extended with initialization and local options\r\nfunctions\t\t\t\t// Object, private utility functions\r\nmethods\t\t\t\t\t// Object, public methods\r\nclasses\t\t\t\t\t// Object, namespaced classes strings\r\nevents\t\t\t\t\t// Object, namespaced event strings\r\n```\r\n\r\nThese values can then be localized in the scope of the plugin for optimal minimization:\r\n\r\n```\r\nvar Plugin = Formstone.Plugin(“namespace”, {\r\n\t\t...\r\n\t}),\r\n\tDefaults     = Plugin.defaults,\r\n\tFunctions    = Plugin.functions,\r\n\tMethods      = Plugin.methods,\r\n\tClasses      = Plugin.classes,\r\n\tEvents       = Plugin.events;\r\n```\r\n\r\nThis may seem strangely redundant at first, however multi-dimensional objects do not minimize efficiently. This is also one reason standard prototypal inheritance is not used when building a plugin, however this is not to say a specific plugin could not contain locally scoped prototypes. Plugin design is always up to the developer, the factory simply provides a consistent, DRY approach to the basic plugin pattern.\r\n\r\n#### Classes\r\n\r\nThe `classes` object returned when defining a plugin will contain properly namespaced strings of both default and custom classes. Custom classes will become object keys, while the namespaced class will become the value:\r\n\r\n```\r\nvar Plugin = Formstone.Plugin(“namespace”, {\r\n\t...\r\n\tclasses: [\r\n\t\t\"visible\",\r\n\t\t\"content\"\r\n\t],\r\n\t...\r\n});\r\n```\r\n\r\n```\r\nbase\t\t\t\t\t// Default, \"namespace\"\r\nelement\t\t\t\t\t// Default, \"namespace-element\"\r\n\r\nvisible\t\t\t\t\t// Custom,  \"namespace-visible\"\r\ncontent\t\t\t\t\t// Custom,  \"namespace-content\"\r\n```\r\n\r\n#### Events\r\n\r\nThe `events` object returned when defining a plugin will contain properly namespaced strings of both default and custom events. Custom events will become object keys, while the namespaced event will become the value:\r\n\r\n```\r\nvar Plugin = Formstone.Plugin(“namespace”, {\r\n\t...\r\n\tevents: [\r\n\t\t\"enable\",\r\n\t\t\"disable\"\r\n\t],\r\n\t...\r\n});\r\n```\r\n\r\n```\r\nnamespace\t\t\t\t// Default, \".namespace\",\r\nblur\t\t\t\t\t// Default, \"blur.namespace\",\r\nchange\t\t\t\t\t// Default, \"change.namespace\",\r\nclick\t\t\t\t\t// Default, \"click.namespace\",\r\nclickTouchStart\t\t\t// Default, \"click.namespace touchstart.namespace\",\r\ndblClick\t\t\t\t// Default, \"dblClick.namespace\",\r\ndrag\t\t\t\t\t// Default, \"drag.namespace\",\r\ndragEnd\t\t\t\t\t// Default, \"dragend.namespace\",\r\ndragEnter\t\t\t\t// Default, \"dragenter.namespace\",\r\ndragLeave\t\t\t\t// Default, \"dragleave.namespace\",\r\ndragOver\t\t\t\t// Default, \"dragover.namespace\",\r\ndragStart\t\t\t\t// Default, \"dragstart.namespace\",\r\ndrop\t\t\t\t\t// Default, \"drop.namespace\",\r\nerror\t\t\t\t\t// Default, \"error.namespace\",\r\nfocus\t\t\t\t\t// Default, \"focus.namespace\",\r\nfocusIn\t\t\t\t\t// Default, \"focusin.namespace\",\r\nfocusOut\t\t\t\t// Default, \"focusout.namespace\",\r\ninput\t\t\t\t\t// Default, \"input.namespace\",\r\nkeyDown\t\t\t\t\t// Default, \"keydown.namespace\",\r\nkeyPress\t\t\t\t// Default, \"keypress.namespace\",\r\nkeyUp\t\t\t\t\t// Default, \"keyup.namespace\",\r\nload\t\t\t\t\t// Default, \"load.namespace\",\r\nmouseDown\t\t\t\t// Default, \"mousedown.namespace\",\r\nmouseEnter\t\t\t\t// Default, \"mouseenter.namespace\",\r\nmouseLeave\t\t\t\t// Default, \"mouseleave.namespace\",\r\nmouseMove\t\t\t\t// Default, \"mousemove.namespace\",\r\nmouseOut\t\t\t\t// Default, \"mouseout.namespace\",\r\nmouseOver\t\t\t\t// Default, \"mouseover.namespace\",\r\nmouseUp\t\t\t\t\t// Default, \"mouseup.namespace\",\r\nresize\t\t\t\t\t// Default, \"resize.namespace\",\r\nscroll\t\t\t\t\t// Default, \"scroll.namespace\",\r\nselect\t\t\t\t\t// Default, \"select.namespace\",\r\ntouchCancel\t\t\t\t// Default, \"touchcancel.namespace\",\r\ntouchEnd\t\t\t\t// Default, \"touchend.namespace\"\r\ntouchLeave\t\t\t\t// Default, \"touchleave.namespace\",\r\ntouchMove\t\t\t\t// Default, \"touchmove.namespace\",\r\ntouchStart\t\t\t\t// Default, \"touchstart.namespace\",\r\ntransitionEnd\t\t\t// Default, \"transitionEnd.namespace\"\r\n\r\nenable\t\t\t\t\t// Custom,  \"enable.namespace\"\r\ndisable\t\t\t\t\t// Custom,  \"disable.namespace\"\r\n```"}