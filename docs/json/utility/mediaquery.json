{"options":[{"name":"minWidth","type":" 0 ","description":"Array of min-widths"},{"name":"maxWidth","type":" Infinity ","description":"Array of max-widths"},{"name":"minHeight","type":" 0 ","description":"Array of min-heights"},{"name":"maxHeight","type":" Infinity ","description":"Array of max-heights"},{"name":"unit","type":"string","default":"'px'","description":"Unit to use when matching widths and heights"}],"events":[{"name":"change","description":"Change to a media query match; Triggered on window"}],"methods":[{"name":"bind","description":"Binds callbacks to media query matching.","params":[{"name":"media","type":"string","description":"Media query to match"},{"name":"data","type":"object","description":"Object containing 'enter' and 'leave' callbacks"}],"example":"$.mediaquery(\"bind\", \"(min-width: 500px)\", { ... });"},{"name":"defaults","description":"Extends plugin default settings; effects instances created hereafter.","params":[{"name":"options","type":"object","default":"{}","description":"New plugin defaults"}],"example":"$.media query(\"defaults\", { ... });"},{"name":"state","description":"Returns the current state.","return":{"type":"object","description":"Current state object"},"example":"var state = $.mediaquery(\"state\");"},{"name":"unbind","description":"Unbinds all callbacks from media query.","params":[{"name":"media","type":"string","description":"Media query to match"}],"example":"$.mediaquery(\"unbind\", \"(min-width: 500px)\");"}],"name":"Media Query","type":"utility","description":"A jQuery plugin for responsive media query events.","use":"### Basic\r\n\r\nMedia Query can track global changes to screen size based on an existing grid system. This is useful when many elements need to be resized at any change to the target screen size. Start by configuring the dimensions to be tracked by passing arrays at initialization. These arrays should contain the target width and/or heights to react to:\r\n\r\n```\r\n$.mediaquery({\r\n\tminWidth     : [ 320, 500, 740, 980, 1220 ],\r\n\tmaxWidth     : [ 1220, 980, 740, 500, 320 ],\r\n\tminHeight    : [ 400, 800 ],\r\n\tmaxHeight    : [ 800, 400 ]\r\n});\r\n```\r\n\r\nAfter initializing, simply listen for the `change` event:\r\n\r\n```\r\n$(window).on(\"change\", function(e, state) {\r\n\tconsole.log(state.minWidth, state.maxWidth, state.minHeight, state.maxHeight);\r\n});\r\n```\r\n\r\nNote: In the example above, the `change` event will be fire twice for each breakpoint. This is becuase Rubbeband will respond to both the `min-width` and `max-width` changes.\r\n\r\n### Binding\r\n\r\nMedia Query can also bind events to specific media query changes for more fine grain control:\r\n\r\n```\r\n$.mediaquery(\"bind\", \"(min-width: 740px)\", {\r\n\tenter: function() {\r\n\t\t...\r\n\t},\r\n\tleave: function() {\r\n\t\t...\r\n\t}\r\n});\r\n```\r\n\r\nNote: The `leave` callback will only fire after the target media query has been matched at least once. If the media query never matches, neither callback will fire.\r\n\r\n#### IE Support\r\n\r\nWhen supporting IE, a [HTML5 enabler](https://gist.github.com/benplum/8045366) and matchMedia polyfill ([IE 8](https://gist.github.com/benplum/8045336), [IE 9](https://gist.github.com/benplum/8045327)) are required."}